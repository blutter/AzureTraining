<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">

<CodeSnippet Format="1.0.0" >
  <Header>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
      <SnippetType>SurroundsWith</SnippetType>
    </SnippetTypes>
    <Title>Azure Guestbook Identity</Title>
	<Shortcut>Azure Guestbook Identity</Shortcut>
    <Author>Azure Fast Start</Author>
    <Description>CSharp snippet for Azure Guestbook Lab</Description>
    <HelpUrl>
    </HelpUrl>
  </Header>
  <Snippet>
    <Code Language="csharp"><![CDATA[
using Microsoft.Azure.Mobile.Server;

namespace W10AZFS_GB_MAService.DataObjects
{
    public class CommentItem : EntityData
    {
        public string Description { get; set; }

        public string Name { get; set; }
    }
}
	]]></Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0" >
  <Header>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
      <SnippetType>SurroundsWith</SnippetType>
    </SnippetTypes>
    <Title>Azure Guestbook Seed</Title>
	<Shortcut>Azure Guestbook Seed</Shortcut>
    <Author>Azure Fast Start</Author>
    <Description>CSharp snippet for Azure Guestbook Lab</Description>
    <HelpUrl>
    </HelpUrl>
  </Header>
  <Snippet>
    <Code Language="csharp"><![CDATA[
            // Autogenerating 100 comments
            for (int i = 0; i < 100; i++)
            {
                context.Set<CommentItem>().Add(new CommentItem()
                {
                    Id = i.ToString("D3"),
                    Name = "Autogenerated",
                    Description = "Comment " + i.ToString("D3")
                });
            }
	]]></Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0" >
  <Header>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
      <SnippetType>SurroundsWith</SnippetType>
    </SnippetTypes>
    <Title>Azure Guestbook Events</Title>
	<Shortcut>Azure Guestbook Events</Shortcut>
    <Author>Azure Fast Start</Author>
    <Description>CSharp snippet for Azure Guestbook Demo</Description>
    <HelpUrl>
    </HelpUrl>
  </Header>
  <Snippet>
    <Code Language="csharp"><![CDATA[
        private MobileServiceCollection<CommentItem, CommentItem> items;
        private IMobileServiceTable<CommentItem> commentTable = App.MobileService.GetTable<CommentItem>();
        //private IMobileServiceSyncTable<CommentItem> commentTable = App.MobileService.GetSyncTable<CommentItem>(); // offline sync
        private async Task InsertCommentItem(CommentItem commentItem)
        {
            // This code inserts a new CommentItem into the database. When the operation completes
            // and Mobile Services has assigned an Id, the item is added to the CollectionView
            await commentTable.InsertAsync(commentItem);
            items.Add(commentItem);
            await RefreshCommentItems();

            //await SyncAsync(); // offline sync
        }

        private async Task RefreshCommentItems()
        {
            MobileServiceInvalidOperationException exception = null;
            try
            {
                IReadOnlyList<User> users = await User.FindAllAsync();
                string displayName = "";
                foreach (User u in users)
                {
                    var pFirstName = await u.GetPropertyAsync(KnownUserProperties.FirstName);
                    var pLastName = await u.GetPropertyAsync(KnownUserProperties.LastName);
                    displayName = string.Format("{0} {1}", pFirstName, pLastName);
                }

                // This code refreshes the entries in the list view by querying the CommentItems table.
                items = await commentTable
                    //.Where(commentItem => commentItem.Name == displayName)
                    .OrderByDescending(commentItem => commentItem.Id)
                    .ToCollectionAsync();
            }
            catch (MobileServiceInvalidOperationException e)
            {
                exception = e;
            }

            if (exception != null)
            {
                await new MessageDialog(exception.Message, "Error loading items").ShowAsync();
            }
            else
            {
                ltvGuestbook.ItemsSource = items;
                this.SubmitButton.IsEnabled = true;
            }
        }

        private async void RefreshButton_Click(object sender, RoutedEventArgs e)
        {
            RefreshButton.IsEnabled = false;

            //await SyncAsync(); // offline sync
            await RefreshCommentItems();

            RefreshButton.IsEnabled = true;
        }

        private async void SubmitButton_Click(object sender, RoutedEventArgs e)
        {
            IReadOnlyList<User> users = await User.FindAllAsync();
            string displayName = "";
            foreach (User u in users)
            {
                var pFirstName = await u.GetPropertyAsync(KnownUserProperties.FirstName);
                var pLastName = await u.GetPropertyAsync(KnownUserProperties.LastName);
                displayName = string.Format("{0} {1}", pFirstName, pLastName);
            }
            var num = 0;
            if (items.Count > 0)
            {
                var lastComment = items.OrderByDescending(item => item.Id).First();
                num = Convert.ToInt32(lastComment.Id) + 1;
            }

            var commentItem = new CommentItem { Id = num.ToString("D3"), Description = CommentTextBox.Text, Name = displayName };
            await InsertCommentItem(commentItem);
        }

        protected override async void OnNavigatedTo(NavigationEventArgs e)
        {
            //await InitLocalStoreAsync(); // offline sync
            await RefreshCommentItems();
        }

        #region Offline sync

        //private async Task InitLocalStoreAsync()
        //{
        //    if (!App.MobileService.SyncContext.IsInitialized)
        //    {
        //        var store = new MobileServiceSQLiteStore("localstore.db");
        //        store.DefineTable<CommentItem>();
        //        await App.MobileService.SyncContext.InitializeAsync(store);
        //    }
        //
        //    await SyncAsync();
        //}

        //private async Task SyncAsync()
        //{
        //    await App.MobileService.SyncContext.PushAsync();
        //    await commentTable.PullAsync("commentItems", commentTable.CreateQuery());
        //}

        #endregion
		]]></Code>
  </Snippet>
</CodeSnippet>
<CodeSnippet Format="1.0.0" >
  <Header>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
      <SnippetType>SurroundsWith</SnippetType>
    </SnippetTypes>
    <Title>Azure Guestbook Identity client</Title>
	<Shortcut>Azure Guestbook Identity client</Shortcut>
    <Author>Azure Fast Start</Author>
    <Description>CSharp snippet for Azure Guestbook Lab</Description>
    <HelpUrl>
    </HelpUrl>
  </Header>
  <Snippet>
    <Code Language="csharp"><![CDATA[
using System;
using System.Collections.Generic;
using System.Text;
using Newtonsoft.Json;

namespace AzureGuestbook
{
    public class CommentItem
    {
        public string Id { get; set; }

        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }
    }
}

	]]></Code>
  </Snippet>
</CodeSnippet>

</CodeSnippets>